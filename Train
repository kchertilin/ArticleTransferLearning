# Подключаем библиотеки
from __future__ import print_function, division
import torch
import torch.nn as nn
import torch.optim as optim
from torch.optim import lr_scheduler
import torchvision
from torchvision import datasets, models, transforms
import matplotlib.pyplot as plt
import numpy as np
import time
import os
import copy

# Загружаем и преобразуем датасет

# Нормализация, ротация ориентации и обрезание изображений
mean_nums = [0.485, 0.456, 0.406]
std_nums = [0.229, 0.224, 0.225]

chosen_transforms = {'train': transforms.Compose([
        transforms.RandomResizedCrop(size=256),
        transforms.RandomRotation(degrees=15),
        transforms.RandomHorizontalFlip(),
        transforms.ToTensor(),
        transforms.Normalize(mean_nums, std_nums)
]), 'val': transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize(mean_nums, std_nums)
]),
}

# Путь к датасету
data_dir = 'data_path'

# Создание датасетов с помощью Image Folder
chosen_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),
  chosen_transforms[x])
                  for x in ['train', 'val']}

# Загрузка данных
dataloaders = {x: torch.utils.data.DataLoader(chosen_datasets[x], batch_size=5,
  shuffle=True)
              for x in ['train', 'val']}

dataset_sizes = {x: len(chosen_datasets[x]) for x in ['train', 'val']}
class_names = chosen_datasets['train'].classes

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Пример нескольких обработанных изображений
def imshow(inp, title=None):
    inp = inp.numpy().transpose((1, 2, 0))
    mean = np.array([mean_nums])
    std = np.array([std_nums])
    inp = std * inp + mean
    inp = np.clip(inp, 0, 1)
    plt.figure(figsize=(50, 25))
    plt.imshow(inp)
    if title is not None:
        plt.title(title, fontsize=70)
    plt.pause(0.001)  # Пауза для обновления

# Загрузка данных для визуализации
inputs, classes = next(iter(dataloaders['train']))
out = torchvision.utils.make_grid(inputs)
imshow(out, title=[class_names[x] for x in classes])

# Настройка модели обучения
# Загрузка структуры НС

res_mod = models.resnet34(pretrained=True)

num_ftrs = res_mod.fc.in_features
res_mod.fc = nn.Linear(num_ftrs, 5)

# Показ слоев НС
for name, child in res_mod.named_children():
    print(name)

res_mod = res_mod.to(device)

# Критерий Кросс-энтропия
criterion = nn.CrossEntropyLoss()

# Оптимизация SGD
optimizer_ft = optim.SGD(res_mod.parameters(), lr=0.001, momentum=0.9)

# Планировщик скорости обучения
exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=5, gamma=0.1)


def train_model(model, criterion, optimizer, scheduler, num_epochs=20):
    since = time.time()

    best_model_wts = copy.deepcopy(model.state_dict())
    best_acc = 0.0

    for epoch in range(num_epochs):
        print('Эпоха {}/{}'.format(epoch + 1, num_epochs))
        print('-' * 10)

        # Фазы эпохи
        for phase in ['train', 'val']:
            if phase == 'train':
                scheduler.step()
                model.train()  # Перейти на фазу обучения
            else:
                model.eval()   # Перейти на фазу проверки

            current_loss = 0.0
            current_corrects = 0

            # Обучение
            print('Перебор изображений...')

            for inputs, labels in dataloaders[phase]:
                inputs = inputs.to(device)
                labels = labels.to(device)

                # Обнуление градиентов, т.к. веса не замораживаем
                optimizer.zero_grad()

                # Статистика функции потерь во время фазы обучения
                with torch.set_grad_enabled(phase == 'train'):
                    outputs = model(inputs)
                    _, preds = torch.max(outputs, 1)
                    loss = criterion(outputs, labels)

                    # Оптимизация
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                # Переменные для статистики функции потерь
                current_loss += loss.item() * inputs.size(0)
                current_corrects += torch.sum(preds == labels.data)

            epoch_loss = current_loss / dataset_sizes[phase]
            epoch_acc = current_corrects.double() / dataset_sizes[phase]

            print('{} Потери: {} Точность: {}'.format(
                phase, epoch_loss, epoch_acc))
                   
                   if phase == 'train':
                        acc_train = epoch_acc

            # Сохраняем, если точность на фазе проверки выше наилучшей
            if phase == 'val' and epoch_acc > best_acc:
                best_acc_val = epoch_acc
                best_acc_train = acc_train
                best_model_wts = copy.deepcopy(model.state_dict())

        print()

    time_since = time.time() - since
    print('Обучение завершено за {}ч {}м {}с'.format(
        time_since // 3600, time_since % 3600 // 60, time_since % 3600 % 60))
    print('Лучшая точность на обучающей выборке: {}%'.format(best_acc_train))
    print('Лучшая точность на тестовой выборке: {}%'.format(best_acc_val))
    # Загружаем лучшие веса
    model.load_state_dict(best_model_wts)
    return model

# Итоговая модель
base_model = train_model(res_mod, criterion, optimizer_ft, exp_lr_scheduler)
plt.show()

# Сохраняем НС
torch.save(base_model,'model_path')
